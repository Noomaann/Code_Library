/**
*   author: Noman
**/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll ;
typedef vector<int> vi;
typedef vector<ll> vl;
#define pan cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(0);
// define values.
#define MOD 1000000007
#define PI 3.1415926535897932384626
/* Bit-Stuff */
#define get_set_bits(a) (__builtin_popcount(a))
#define get_set_bitsll(a) ( __builtin_popcountll(a))
#define get_trail_zero(a) (__builtin_ctz(a))
#define get_lead_zero(a) (__builtin_clz(a))
#define get_parity(a) (__builtin_parity(a))
/*  Abbrevations  */
#define ff first
#define ss second
#define mp make_pair
#define pb push_back
#define Endl "\n"
// loops
#define forin(arr,n) for(ll i=0;i<n;i++) cin>>arr[i];
// sort
#define all(V) (V).begin(),(V).end()
#define srt(V) sort(all(V))
#define srtGreat(V) sort(all(V),greater<ll>())

#define fastio ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

/*

    1. Smallest element ber korte bole tahole Increasing Monotonic Stake use korbo
    2. Greater element ber korte bole tahole Decreasing Monotonic Stake use korbo

    1. Left theke small/greater element ber korte hole 0 to N porjonto loop cholbe 
    2. Right theke small/greater element ber korte hole n-1 to 0 porjonto loop cholbe 

    Time Complexity: O(n) -> karon stake a jeno kono value 1 bar e push/pop hote parbe

*/

void solve() {
    int n;
    cin >> n;
    vi v(n);
    forin(v, n)

    vector<int> a(n, 0);
    stack<int> s;

    for (int i = 0; i < n; i++) {
        while (!s.empty() && s.top() >= v[i]) { // ager value ki current value theke boro or soman kina 
            s.pop();
        }
        if (!s.empty()) { // stake empty na hole top er value tai oi v[i] er jonno ans 
            a[i] = s.top();
        }
        s.push(v[i]); // v[i] push kore dite hobe karon stake a v[i] theke boro/soman r kono value nei
    }
    for (auto it : a) cout << it << " ";
}



int32_t main() {
    fastio;
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif

    int t = 1;
    //cin >> t;

    while (t--) {
        solve();
    }
    return 0;
}
