/**
 *    author: Noman
**/
#include <bits/stdc++.h>
using namespace std;
typedef long long ll ;
typedef vector<int> vi;
typedef vector<ll> vl;
#define pan cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(0);
// define values.
#define MOD 1000000007
#define PI 3.1415926535897932384626
/* Bit-Stuff */
#define get_set_bits(a) (__builtin_popcount(a))
#define get_set_bitsll(a) ( __builtin_popcountll(a))
#define get_trail_zero(a) (__builtin_ctz(a))
#define get_lead_zero(a) (__builtin_clz(a))
#define get_parity(a) (__builtin_parity(a))
/*  Abbrevations  */
#define ff first
#define ss second
#define mp make_pair
#define pb push_back
#define Endl "\n"
// loops
#define forin(arr,n) for(ll i=0;i<n;i++) cin>>arr[i];
// sort
#define all(V) (V).begin(),(V).end()
#define srt(V) sort(all(V))
#define srtGreat(V) sort(all(V),greater<ll>())

#define fastio ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);


const int N = 1e5 + 3;
vector<multiset<int>> adj(N);
vector<int> path;
vector<int> degree(N);

void dfs(int node) {
    while (!adj[node].empty()) {
        int it = *adj[node].begin(); // node er 1st neighbor ber koro. node -> it
        adj[node].erase(adj[node].begin()); // node er 1st neighbor er sathy path delete koro
        adj[it].erase(adj[it].find(node)); // it -> node, ei path tao delete koro, karon eita Undirected Graph so, node -> it and it -> node both direction a path thake
        dfs(it);
    }
    path.pb(node); // protita node er neighbor gulo ke traverse kora shes hole path a push koro
}
void solve() {
    int n, m;
    cin >> n >> m;

    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        adj[u].insert(v);
        adj[v].insert(u);
        degree[u]++;
        degree[v]++;
    }
    int oddDegree = 0;
    int start = 1;
    for (int i = 1; i <= n; i++) {
        if (degree[i] % 2 == 1) {
            oddDegree++;
            start = i;
        }
    }

    // oddDegree == 0 hole Path and Cycle 2 tai thakbe. note :: Cycle thaka manei path thaka karon Cycle ekta special path
    // oddDegree == 2 hole Path thakbe kintu Cycle thakbe na
    if (!(oddDegree == 0 || oddDegree == 2)) {
        cout << "Eulerian Path and Cycle kono tai nei" << Endl;
        return;
    }

    dfs(start);
    if (path.size() != m + 1) {
        cout << "Graph Disconnected so, Eulerian Path possible na" << Endl;
        return;
    }
    reverse(all(path));
    for (int it : path) {
        cout << it << " ";
    }
    cout << Endl;
}



int32_t main() {
    fastio;
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif

    int t = 1;
    //cin >> t;

    while (t--) {
        solve();
    }
    return 0;
}
